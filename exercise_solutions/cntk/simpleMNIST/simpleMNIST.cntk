#
#  Copyright 2016 NVIDIA Corporation
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

# file path definitions

RootDir = "."

ConfigDir = "$RootDir$/Config"
DataDir = "$RootDir$/../Data/MNIST"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"

# overall commands to be executed can string together with colons

command = mnistTrain:mnistTest:topoplot

# path to the model that will be created by train and used by test

modelPath = "$ModelDir$/simpleMNIST.dnn"

# data layout of the images

imageLayout = "cudnn"

# precision of arithmetic to be used

precision = "float"

# deviceId, choose -1 for CPU, >= 0 for GPU, or auto to use GPU if avail or 
# fallback to CPU

deviceId = "auto"

# traceLevel determines how much to be printed, 0 is least and 2 is most

traceLevel = 0

# if stderr is defined, the output will be written to this file instead of 
# the screen

#stderr = "$RootDir$/output"

# command block to specify the training 
mnistTrain = [

# set the action to train

  action = "train"

# 784 inputs, 1 hidden layer, 10 output classes

  SimpleNetworkBuilder = [

# layerSizes, first number is input size, last number is output size, any 
# middle layers are hidden layers. numbers separated by colons

    layerSizes = 784:256:10

# specify the activation type, options are Sigmoid, Tanh, RectifiedLinear

    layerTypes = "Sigmoid"

# specify the function to be minimized, options are SquareError, CrossEntropy
# and CrossEntropyWithSoftmax

    trainingCriterion = "SquareError"

# specify the evaluation criterion

    evalCriterion = "ClassificationError"

    applyMeanVarNorm = true

  ] # end SimpleNetworkBuilder

# SGD is for stochastic gradient descent

  SGD = [

    epochSize = 60000
    minibatchSize = 32

# learning rate per mini-batch

    learningRatesPerMB = 0.1
    maxEpochs = 5

  ] # end SGD

# specify the reader which tells CNTK how to read the data properly

  reader = [

    readerType = "CNTKTextFormatReader"
    file = "$DataDir$/train-images.txt"

    input = [

# specify how many features per example
      features = [
        dim = 784
        format = "dense"
      ]

      labels = [

# specify the dimensionality of the labels
        dim = 10
        format = "dense"
      ]
    ]
  ]

] # end mnistTrain

# command block to specify the testing

mnistTest = [

# set the action to test

  action = "test"

# specify minibatchsize for testing

  minibatchSize = 16

# reader same as above just different file name with the test examples
  reader = [

    readerType = "CNTKTextFormatReader"
    file = "$DataDir$/t10k-images.txt"

    input = [
      features = [
        dim = 784
        format = "dense"
      ]
      labels = [
        dim = 10
        format = "dense"
      ]
    ]
  ]

] # end mnistTest

# command block to specify the plot of the network

topoplot = [

  action = "plot"
  outputdotFile="model.dot"
  outputFile="model.jpg"
  renderCmd="/usr/bin/dot -Tjpg <IN> -o<OUT>"

] # end topoplot
