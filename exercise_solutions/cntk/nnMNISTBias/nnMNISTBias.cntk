#
#  Copyright 2016 NVIDIA Corporation
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

# file path definitions

RootDir = "."

ConfigDir = "$RootDir$/Config"
DataDir = "$RootDir$/../Data/MNIST"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"

# overall commands to be executed

command = mnistTrain:mnistTest:topoplot

# path to the model that will be created by train and used by test

modelPath = "$ModelDir$/nnMNIST.dnn"

# data layout of the images.  cudnn when using GPU wtih CUDNN library

imageLayout = "cudnn"

# precision of the arithmetic. 

precision = "float"

# which device to use.  -1 for CPU, >= 0 for GPU, "auto" for GPU then fallback
# to CPU if no GPU present

deviceId = "auto"

# determines how much info to be printed.  0 is least and 2 is most

traceLevel=0

# if defined, output will be written to this file instead of the screen

#stderr = "$RootDir$/output"

# command block to specify the training

mnistTrain = [

# set the action to train
  action = "train"

# 784 inputs, 1 hidden layer, 10 output classes

  BrainScriptNetworkBuilder = [

# network size parameters

      inputDim = 784
      hiddenDim = 256
      outputDim = 10

# define the sizes of the features and labels. 

      features = Input{ inputDim } 
      labels = Input{ outputDim }

# normalize the input from 0-255 to 0.0 to 1.0

      normFactor = Constant( 0.00390625 )
      featuresScaled = normFactor .* features 

# define the model to be trained

      model (featuresScaled) = {

# first layer multiply by weights

        weights1 = ParameterTensor {( hiddenDim:inputDim )}
        z1 = weights1 * featuresScaled 

# add the bias term

        bias1 = ParameterTensor {( hiddenDim )}
        b1 = z1 + bias1

# activation of first layer

        activations1 = ReLU( b1 )

# second layer multiply by weights

        weights2 = ParameterTensor {( outputDim:hiddenDim )}
        z2 = weights2 * activations1

# second bias layer

        bias2 = ParameterTensor {( outputDim )}
        b2 = z2 + bias2 

# second activation layer

        activations2 = ReLU( b2 )

      }.activations2 # end model

      z = model( featuresScaled )

#define the error criterion

      error = CrossEntropyWithSoftmax( labels, z )
      errPredict = ErrorPrediction( labels, z )

# define the special nodes.

      featureNodes = (features)
      labelNodes = (labels)
      criterionNodes = (error)
      evaluationNodes = (errPredict)
      outputNodes = (z)

  ] # end BrainScriptNetworkBuilder

# define the SGD parameters

  SGD = [

    epochSize = 60000
    minibatchSize = 32
    learningRatesPerMB = 0.1
    maxEpochs = 30

  ] # end SGD

#specify the reader which tells CNTK how to read the data properly.

  reader = [

    readerType = "CNTKTextFormatReader"
    file = "$DataDir$/train-images.txt"

    input = [

# specify how many features per example
      features = [
        dim = 784
        format = "dense"
      ]
      labels = [

# specify how many classes the label can be in
        dim = 10
        format = "dense"
      ]
    ]
  ] # end reader

] # end mnistTrain

# command block to specify the testing

mnistTest = [

# set the action to test

  action = "test"

# set the minibatch size

  minibatchSize = 16

# set the reader, same info as above with different file name

  reader = [

    readerType = "CNTKTextFormatReader"
    file = "$DataDir$/t10k-images.txt"

    input = [
      features = [
        dim = 784
        format = "dense"
      ]
      labels = [
        dim = 10
        format = "dense"
      ]
    ]
  ]

] # end mnistTest

# command block to specify the plot of the network

topoplot = [

  action = "plot" 
  outputdotFile="model.dot"
  outputFile="model.jpg"
  renderCmd="/usr/bin/dot -Tjpg <IN> -o<OUT>"

] # end topoplot
