#
#  Copyright 2016 NVIDIA Corporation
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

# file path definitions

RootDir = "."

ConfigDir = "$RootDir$/Config"
DataDir = "$RootDir$/../Data/MNIST"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"

# overall commands to be executed
 
command = mnistTrain:mnistTest:topoplot

# path to teh model that will be created by train and used by test

modelPath = "$ModelDir$/nnMNIST.dnn"

# data layout of the images.  cudnn when using GPU wtih CUDNN library

imageLayout = "cudnn"

# precision of the arithmetic. 

precision = "float"

# which device to use.  -1 for CPU, >= 0 for GPU, "auto" for GPU then fallback
# to CPU if no GPU present

deviceId = "auto"

# determines how much info to be printed.  0 is least and 2 is most

traceLevel=0

# if defined, output will be written to this file instead of the screen

#stderr = "$RootDir$/output"

# command block to specify the training

mnistTrain = [

# set the action to train

  action = "train"

# 784 inputs, 1 hidden layer, 10 output classes

  BrainScriptNetworkBuilder = {

# image parameters

      imageWidth = 28
      imageHeight = 28
      numChannels = 1
      imageShape = (imageWidth:imageHeight:numChannels)
      labelDim = 10

# defining the sizes of the feature and labels

       features = Input { imageShape }
       labels = Input { labelDim }

# scale the features
      
      normalize256 (x) = x .* Constant( 0.00390625 )

# define the model using CNTK built-in Layers

      model = Sequential (
        
        normalize256 :

# first convolution layer, combines bias and activation

        ConvolutionalLayer { 16, (5:5), 
          activation=ReLU, stride=1, bias=true }:

# first pooling layer

        MaxPoolingLayer { (2:2), stride=(2:2) }:

# second convolution layer, combines bias and activation

        ConvolutionalLayer { 24, (5:5),
          activation=ReLU, stride=1, bias=true }:

# second pooling layer

        MaxPoolingLayer { (2:2), stride=(2:2) }:
        
# first fully connected layer
        DenseLayer { 128, activation=ReLU, bias=true }: 

# second fully connected layer
        DenseLayer { 10, activation=ReLU, bias=true }

      ) # end model definition 

# run the model

      z = model( features )

#define the error criterion

      error = CrossEntropyWithSoftmax( labels, z )
      errPredict = ClassificationError( labels, z )

# define the special nodes.

      featureNodes =(features)
      labelNodes = (labels)
      criterionNodes = (error)
      evaluationNodes = (errPredict)
      outputNodes = (z)

  } # end BrainScriptNetworkBuilder

# define the SGD parameters

  SGD = [

    epochSize = 60000
    minibatchSize = 32
    learningRatesPerMB = 0.1
    maxEpochs = 30

  ] # end SGD

#specify the reader which tells CNTK how to read the data properly.

  reader = [

    readerType = "CNTKTextFormatReader"
    file = "$DataDir$/train-images.txt"

    input = [

# how many features per example

      features = [
        dim = 784
        format = "dense"
      ]

# how many classes for the label

      labels = [
        dim = 10
        format = "dense"
      ]
    ]
  ] # end reader

] # end mnistTrain

# command block to specify the testing

mnistTest = [

# set the action to test

  action = "test"

# set the minibatch size

  minibatchSize = 16

# set the reader, same info as above with different file name

  reader = [

    readerType = "CNTKTextFormatReader"
    file = "$DataDir$/t10k-images.txt"

    input = [
      features = [
        dim = 784
        format = "dense"
      ]
      labels = [
        dim = 10
        format = "dense"
      ]
    ]
  ]

] # end mnistTest

# command block to specify the plot of the network

topoplot = [

  action = "plot" 
  outputdotFile="model.dot"
  outputFile="model.jpg"
  renderCmd="/usr/bin/dot -Tjpg <IN> -o<OUT>"
] # end topoplot
